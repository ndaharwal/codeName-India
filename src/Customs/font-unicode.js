var currentCharacterID = 0;
var isProgressCharacter = false;

var fontUniCode = [
  [
    0x0020, 0x0e01, 0x0e02, 0x0e03, 0x0e04, 0x0e05, 0x0e06, 0x0e07, 0x0e08,
    0x0e09, 0x0e0a, 0x0e0b,
  ], // Space
  [
    0x0061, 0x00c0, 0x00c1, 0x00c2, 0x00c3, 0x00c4, 0x00c5, 0x00c6, 0x00c7,
    0x00c8, 0x00c9, 0x00ca,
  ], // a
  [
    0x0041, 0x00cb, 0x00cc, 0x00cd, 0x00ce, 0x00cf, 0x00d0, 0x00d1, 0x00d2,
    0x00d3, 0x00d4, 0x00d5,
  ], // A
  [
    0x0062, 0x00d6, 0x00d7, 0x00d8, 0x00d9, 0x00da, 0x00db, 0x00dc, 0x00dd,
    0x00de, 0x00df, 0x00e0,
  ], // b
  [
    0x0042, 0x00e1, 0x00e2, 0x00e3, 0x00e4, 0x00e5, 0x00e6, 0x00e7, 0x00e8,
    0x00e9, 0x00ea, 0x00eb,
  ], //B

  [
    0x0063, 0x00ec, 0x00ed, 0x00ee, 0x00ef, 0x00f0, 0x00f1, 0x00f2, 0x00f3,
    0x00f4, 0x00f5, 0x00f6,
  ], //c
  [
    0x0043, 0x00f7, 0x00f8, 0x00f9, 0x00fa, 0x00fb, 0x00fc, 0x00fd, 0x00fe,
    0x00ff, 0x00b4, 0x02d8,
  ], //C
  [
    0x0064, 0x02c7, 0x00b8, 0x02c6, 0x00a8, 0x02d9, 0x02dd, 0x02db, 0x02da,
    0x02dc, 0x0102, 0x0100,
  ], //d
  [
    0x0044, 0x0104, 0x01fc, 0x0106, 0x010c, 0x0108, 0x010a, 0x010e, 0x0110,
    0x0114, 0x011a, 0x0116,
  ], //D
  [
    0x0065, 0x0112, 0x0118, 0x011e, 0x011c, 0x0122, 0x0120, 0x0126, 0x0124,
    0x012c, 0x0130, 0x012a,
  ], //e
  [
    0x0045, 0x012e, 0x0128, 0x0132, 0x0134, 0x0136, 0x0139, 0x013d, 0x013b,
    0x013f, 0x0141, 0x0143,
  ], //E
  [
    0x0066, 0x0147, 0x0145, 0x014e, 0x0150, 0x014c, 0x01fe, 0x0152, 0x0154,
    0x0158, 0x0156, 0x015a,
  ], //f
  [
    0x0046, 0x0160, 0x015e, 0x015c, 0x0218, 0x0166, 0x0164, 0x0162, 0x016c,
    0x0170, 0x016a, 0x0172,
  ], //F
  [
    0x0067, 0x016e, 0x0168, 0x1e82, 0x0174, 0x1e84, 0x1e80, 0x0176, 0x0178,
    0x1ef2, 0x0179, 0x017d,
  ], //g
  [
    0x0047, 0x017b, 0x0103, 0x0101, 0x0105, 0x01fd, 0x0107, 0x010d, 0x0109,
    0x010b, 0x010f, 0x0111,
  ], //G
  [
    0x0068, 0x0115, 0x011b, 0x0117, 0x0113, 0x0119, 0xfb00, 0xfb03, 0xfb04,
    0xfb01, 0xfb02, 0x011f,
  ], //h
  [
    0x0048, 0x011d, 0x0123, 0x0121, 0x0127, 0x0125, 0x012d, 0x012b, 0x012f,
    0x0129, 0x0133, 0x0131,
  ], //H
  [
    0x0069, 0x0135, 0x0137, 0x0138, 0x013a, 0x013e, 0x013c, 0x0140, 0x0142,
    0x0144, 0x0149, 0x0148,
  ], //i
  [
    0x0049, 0x0146, 0x014f, 0x27be, 0x014d, 0x01ff, 0x0153, 0x0155, 0x0159,
    0x0157, 0x015b, 0x0161,
  ], //I
  [
    0x006a, 0x015f, 0x015d, 0x0219, 0xfb06, 0x0167, 0x0165, 0x0163, 0x016d,
    0x0171, 0x016b, 0x0173,
  ], //j
  [
    0x004a, 0x016f, 0x0169, 0x1e83, 0x0175, 0x1e85, 0x1e81, 0x0177, 0x1ef3,
    0x017a, 0x017e, 0x017c,
  ], //J
  [
    0x006b, 0x207f, 0x014a, 0x014b, 0x017f, 0xfb05, 0x00a4, 0x00a2, 0x20ac,
    0x20a3, 0x00a3, 0x00a5,
  ], //k
  [
    0x004b, 0x20a4, 0x20a7, 0x20a1, 0x0192, 0x2070, 0x00b9, 0x00b2, 0x00b3,
    0x2074, 0x2075, 0x2076,
  ], //K
  [
    0x006c, 0x2077, 0x2078, 0x2079, 0x207d, 0x207e, 0x2080, 0x2081, 0x2082,
    0x2083, 0x2084, 0x2085,
  ], //l
  [
    0x004c, 0x2086, 0x2087, 0x2088, 0x2089, 0x208d, 0x208e, 0x00bd, 0x00bc,
    0x215b, 0x2154, 0x00be,
  ], //L
  [
    0x006d, 0x215c, 0x215d, 0x215e, 0x27b4, 0x201a, 0x201e, 0x201c, 0x201d,
    0x00b1, 0x00ab, 0x00bb,
  ], //m
  [
    0x004d, 0x2039, 0x203a, 0x2013, 0x2014, 0x00b7, 0x2264, 0x2248, 0x2260,
    0x00ac, 0x212e, 0x2202,
  ], //M
  [
    0x006e, 0x2265, 0x27bd, 0x00a6, 0x2030, 0x2026, 0x2020, 0x2021, 0x2012,
    0x2212, 0x2122, 0x00a7,
  ], //n
  [
    0x004e, 0x00a9, 0x00aa, 0x00ad, 0x00b0, 0x00b5, 0x00ba, 0x27bc, 0x2024,
    0x2025, 0x2116, 0x2206,
  ], //N
  [
    0x006f, 0x220f, 0x2211, 0x2215, 0x2219, 0x221a, 0x221e, 0x222b, 0x021a,
    0x021b, 0x02c9, 0x037e,
  ], //o
  [
    0x004f, 0x2113, 0x0384, 0x0385, 0x0387, 0x0391, 0x0386, 0x0392, 0x0393,
    0x0395, 0x0388, 0x0396,
  ], //O
  [
    0x0070, 0x0397, 0x0389, 0x0398, 0x0399, 0x03aa, 0x038a, 0x039a, 0x039b,
    0x039c, 0x039d, 0x27bb,
  ], //p
  [
    0x0050, 0x039e, 0x039f, 0x038c, 0x03a0, 0x03a1, 0x03a3, 0x03a4, 0x03a5,
    0x03ab, 0x038e, 0x03a6,
  ], //P
  [
    0x0071, 0x03a7, 0x03a8, 0x2126, 0x038f, 0x03b1, 0x03ac, 0x03b2, 0x03b3,
    0x03b4, 0x03ad, 0x03b6,
  ], //q
  [
    0x0051, 0x03b7, 0x03ae, 0x03b8, 0x27ba, 0x03ca, 0x0390, 0x03af, 0x03ba,
    0x03bb, 0x03bc, 0x03bd,
  ], //Q
  [
    0x0072, 0x03be, 0x03c0, 0x03c1, 0x03c2, 0x03c3, 0x03c4, 0x03c5, 0x27b9,
    0x03cb, 0x03b0, 0x03cd,
  ], //r
  [
    0x0052, 0x03c6, 0x03c7, 0x03c8, 0x03c9, 0x03ce, 0x03bf, 0x03cc, 0x03d0,
    0x03d1, 0x03f0, 0x0410,
  ], //R
  [
    0x0073, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0401, 0x0416, 0x0417,
    0x0418, 0x0419, 0x041a,
  ], //s
  [
    0x0053, 0x041b, 0x041c, 0x041d, 0x041e, 0x041f, 0x0420, 0x0421, 0x0422,
    0x0423, 0x0424, 0x0425,
  ], //S
  [
    0x0074, 0x0426, 0x0427, 0x0428, 0x0429, 0x042a, 0x042b, 0x042c, 0x042d,
    0x042e, 0x042f, 0x0490,
  ], //t
  [
    0x0054, 0x27b8, 0x0402, 0x0403, 0x0404, 0x0405, 0x0406, 0x0407, 0x0408,
    0x0409, 0x040a, 0x040b,
  ], //T
  [
    0x0075, 0x040c, 0x040e, 0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435,
    0x0451, 0x0436, 0x0437,
  ], //u
  [
    0x0055, 0x0438, 0x0439, 0x043a, 0x043b, 0x043c, 0x043d, 0x043e, 0x043f,
    0x0440, 0x0441, 0x0442,
  ], //U
  [
    0x0076, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447, 0x0448, 0x0449, 0x044a,
    0x044b, 0x044c, 0x044d,
  ], //v
  [
    0x0056, 0x044e, 0x044f, 0x0491, 0x0452, 0x0453, 0x0454, 0x0455, 0x0456,
    0x0457, 0x0458, 0x0459,
  ], //V
  [
    0x0077, 0x045a, 0x045b, 0x045c, 0x045e, 0x040f, 0x0462, 0x0472, 0x0474,
    0x045f, 0x0463, 0x0473,
  ], //w
  [
    0x0057, 0x0475, 0x04d9, 0x2701, 0x2702, 0x2703, 0x2704, 0x260e, 0x2706,
    0x2707, 0x2708, 0x2709,
  ], //W
  [
    0x0078, 0x261b, 0x261e, 0x270c, 0x270d, 0x270e, 0x270f, 0x2710, 0x2711,
    0x2712, 0x2713, 0x2714,
  ], //x
  [
    0x0058, 0x2715, 0x2716, 0x2717, 0x2718, 0x2719, 0x271a, 0x271b, 0x271c,
    0x271d, 0x271e, 0x271f,
  ], //X
  [
    0x0079, 0x2720, 0x2721, 0x2722, 0x2723, 0x2724, 0x2725, 0x2726, 0x27b7,
    0x2727, 0x2605, 0x2729,
  ], //y
  [
    0x0059, 0x272a, 0x272b, 0x272c, 0x272d, 0x272e, 0x272f, 0x2730, 0x2731,
    0x2732, 0x2733, 0x2734,
  ], //Y
  [
    0x007a, 0x2735, 0x2736, 0x2737, 0x2738, 0x2739, 0x273a, 0x273b, 0x273c,
    0x273d, 0x273e, 0x273f,
  ], //z
  [
    0x005a, 0x2740, 0x2741, 0x2742, 0x2743, 0x2744, 0x2745, 0x2746, 0x2747,
    0x2748, 0x2749, 0x274a,
  ], //Z
  [0x0060], //`
  [0x0031, 0x274b, 0x25cf, 0x274d, 0x25a0, 0x274f], //1
  [0x0032, 0x2750, 0x2751, 0x2752, 0x25b2, 0x25bc], //2
  [0x0033, 0x25c6, 0x2756, 0x25d7, 0x2758, 0x2759], //3
  [0x0034, 0x275a, 0x275b, 0x275c, 0x275d, 0x275e], //4
  [0x0035, 0x2761, 0x2762, 0x2763, 0x2764, 0x2765], //5
  [0x0036, 0x2766, 0x2767, 0x2460, 0x2461, 0x2462], //6
  [0x0037, 0x2463, 0x2464, 0x2465, 0x2466, 0x2467], //7
  [0x0038, 0x2468, 0x2469, 0x2776, 0x2777, 0x2778], //8
  [0x0039, 0x2779, 0x277a, 0x277b, 0x277c, 0x277d], //9
  [0x0030, 0x277e, 0x277f, 0x2780, 0x2781, 0x2782], //0
  [0x007e, 0x2783, 0x2784, 0x2785, 0x2786, 0x2787], //~
  [0x0021], //!
  [0x0040, 0x278c, 0x2788, 0x2789, 0x278a, 0x278b], //@
  [0x0023], //#
  [0x0024], //$
  [0x0025], //%
  [0x005e, 0x2791, 0x278d, 0x278e, 0x278f, 0x2790], //^
  [0x0026, 0x2194, 0x2792, 0x2793, 0x2794, 0x2192], //&
  [0x002a], //*
  [0x0028], //(
  [0x0029], //)
  [0x002d], //-
  [0x005f, 0x279c, 0x2798, 0x2799, 0x279a, 0x279b], //_
  [0x003d], //=
  [0x002b], //+
  [
    0x005c, 0x263a, 0x263b, 0x2665, 0x2666, 0x2663, 0x2660, 0x2022, 0x25d8,
    0x25cb, 0x2642, 0x2640,
  ], //\
  [0x007c, 0x266a, 0x266b, 0x263c, 0x25ba, 0x25c4, 0x2195, 0x203c, 0x00b6], //|
  [0x003b], //;
  [0x003a], //:
  [0x0027], //’
  [0x0022], //”
  [0x002c], //,
  [0x002e], //.
  [0x002f, 0x279d, 0x279e, 0x279f, 0x27a0, 0x27a1], // /
  [0x003f], //?
  [0x263a], //Alt+1
  [0x263b], //Alt+2
  [0x2665], //Alt+3
  [0x2666], //Alt+4
  [0x2663], //Alt+5
  [0x2660], //Alt+6
  [0x2022], //Alt+7
  [0x25d8], //Alt+8
  [0x25cb], //Alt+9
  [0x2642], //Alt+11
  [0x2640], //Alt+12
  [0x266a], //Alt+13
  [0x266b], //Alt+14
  [0x263c], //Alt+15
  [
    0x25ba, 0x27a8, 0x27a9, 0x27aa, 0x27ab, 0x27ac, 0x27ad, 0x27ae, 0x27af,
    0x27b1, 0x27b2, 0x27b3,
  ], //Alt+16
  [0x25c4], //Alt+17
  [0x2195], //Alt+18
  [0x203c], //Alt+19
  [0x00b6], //Alt+20
  [
    0x003c, 0x0181, 0x0182, 0x0184, 0x0186, 0x0187, 0x0189, 0x018a, 0x018b,
    0x018e, 0x018f, 0x0190,
  ], //<
  [
    0x003e, 0x0191, 0x0193, 0x0194, 0x0196, 0x0197, 0x0198, 0x019c, 0x019d,
    0x019f, 0x01a0, 0x01a2,
  ], //>
  [
    0x005b, 0x0e0c, 0x0e0d, 0x0e0e, 0x0e0f, 0x0e10, 0x0e11, 0x0e12, 0x0e13,
    0x0e14, 0x0e15, 0x0e16,
  ], //[
  [
    0x007b, 0x0e17, 0x0e18, 0x0e19, 0x0e1a, 0x0e1b, 0x0e1c, 0x0e1d, 0x0e1e,
    0x0e1f, 0x0e20, 0x0e21,
  ], //{
  [
    0x005d, 0x0e22, 0x0e23, 0x0e24, 0x0e25, 0x0e26, 0x0e27, 0x0e28, 0x0e29,
    0x0e2a, 0x0e2b, 0x0e2c,
  ], //]
  [0x007d, 0x0e2d, 0x0e2e, 0x0e2f, 0x0e30, 0x0e32], //}
];

String.prototype.toUnicode = function () {
  var result = "";
  for (var i = 0; i < this.length; i++) {
    var partial = this[i].charCodeAt(0).toString(16);
    while (partial.length !== 4) partial = "0" + partial;
    result += "0x" + partial;
  }
  return result;
};

function GetUnicodeOperation(text) {
  if (text != null && text != "") {
    //console.log("Event Trigger");
    if (text.length == 1) {
      $("#btnPreviousLetter").removeAttr("disabled");
      $("#btnNextLetter").removeAttr("disabled");
      if (!isProgressCharacter) currentCharacterID = 0;
      else isProgressCharacter = false;
      var char = text.slice(0, 1);
      var unicode = char.toUnicode();

      var index = -1;
      for (var i = 0; i < fontUniCode.length; i++) {
        for (var j = 0; j < fontUniCode[i].length; j++) {
          if (unicode == fontUniCode[i][j]) {
            index = i;
            break;
          }
        }

        if (index != -1) {
          break;
        }
      }

      if (index != -1) {
        var selectedFont = getFontStyle();
        $(".letterbox-wrapper").html("");
        for (var j = 0; j < fontUniCode[index].length; j++) {
          $(".letterbox-wrapper").append(
            '<div class="letterbox" id="clk_' +
              j +
              '" data-value="' +
              j +
              '" onclick="ApplyFonts(this,\'' +
              fontUniCode[index][j] +
              '\')" style="font-family:' +
              selectedFont +
              '">' +
              String.fromCharCode(fontUniCode[index][j]) +
              "</div>"
          );
        }

        if (fontUniCode[index].length < 12) {
          for (var j = fontUniCode[index].length; j < 12; j++) {
            $(".letterbox-wrapper").append(
              '<div class="letterbox" style="cursor:not-allowed">&nbsp;</div>'
            );
          }
        }
      } else {
        ClearLetterVariable();
      }
    } else {
      ClearLetterVariable();
      //isTextUpdated=1;
    }
  } else {
    ClearLetterVariable();
  }
}

function ApplyFonts(obj, code) {
  var activeObject = canvas.getActiveObject();
  if (!activeObject) {
    return;
  }


  var _ic = $(obj).attr("data-value");
  currentCharacterID = parseInt(_ic);
  isProgressCharacter = true;
  var newObject = canvas.getActiveObject();
  var selectionStartIndex = newObject.selectionStart;
  var selectionEndIndex = newObject.selectionEnd;
  appendText(String.fromCharCode(code));
  newObject.exitEditing();
  canvas.renderAll();
  newObject.selectionStart = selectionStartIndex;
  newObject.selectionEnd = selectionEndIndex;

  newObject.enterEditing();
  canvas.renderAll();
}

function ClearLetterVariable() {
  $(".letterbox-wrapper").html("");
  for (var i = 0; i < 12; i++) {
    $(".letterbox-wrapper").append('<div class="letterbox">&nbsp;</div>');
  }
  $("#btnPreviousLetter").attr("disabled", "disabled");
  $("#btnNextLetter").attr("disabled", "disabled");
}

$(function () {
  $("#btnNextLetter").click(function () {
    console.log("Next");
    var nextID = parseInt(currentCharacterID) + 1;
    if ($("#clk_" + nextID).length > 0) {
      $("#clk_" + nextID).trigger("click");
    }
  });

  $("#btnPreviousLetter").click(function () {
    console.log("Previous");
    var previousID = parseInt(currentCharacterID) - 1;
    if ($("#clk_" + previousID).length > 0) {
      $("#clk_" + previousID).trigger("click");
    }
  });
});
